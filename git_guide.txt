【git基本的執行順序】 追蹤目錄 → 檔案修改 →　追蹤檔案　→　提交版本
【git 指令】
git init: 追蹤此目錄(建立'.git'子目錄，用於儲存git訊息)
git status: 用於檢查當前儲存庫的狀態，並顯示已修改或未追蹤的檔案。
git add 檔名: 將特定檔案添加到暫存區，準備提交到版本控制系統中。
git add .: 將所有已修改或新增的檔案添加到暫存區，準備提交到版本控制系統中。
git restore 檔名: 將檔案回復至最新版本
git restore --source=版本代碼 檔名: 將檔案回復至特定版本
git commit -a: 直接提交有修改的檔案，相當於同時做add及commit的動作
git commit -m '該修改紀錄的名稱': 將已暫存的檔案提交到版本控制系統中，並附上一條相關的修改訊息。
git commit --amend: 用於修改最新版本的內容，當有忘記寫入的小東西或想修改版本訊息即可使用
git log: 用於檢視版本控制系統的提交紀錄，顯示先前的提交歷史記錄，若進入less模式，可用"q"退出
git reset 版本代碼: 回到至該版本，回到的位置為修改後、上傳前，並且會保留文件現有的樣子
git reset --hard 版本代碼: 完整回復至該版本提交前的樣子
git revert 版本代碼: 用於取消錯誤的commit
git branch: 顯示當前儲存庫中的所有分支，以及哪個分支是當前活動分支。
git branch 分支名: 創建一個新的分支，並以指定的名稱命名。
git branch -d 分支名: 刪除支線
git branch -M 名稱: 將目前分支改名為新的名稱
git checkout 分支名: 切換到指定的分支，開始在該分支上進行工作，也可用於將github上的分支抓下來。
git checkout -b 分支名: 創建一個新分支，並且切換至該分支
git checkout -: 切換至上個分支
git checkout .: 使目錄中的所有改動恢復為上次提交時的狀態(完整的恢復至該版本原有樣子)
git merge 分支: 將目標分支合併至目前分支，且若兩分支衝突，則需手動排除問題
git reflog: 查詢所有對git執行的動作
git cherry-pick: 進行採櫻桃的動作，可將後續版本的更新內容以跳著的方式添加至該版本
git stash: 將目前狀態儲存至stash的暫存區，並且還原至該版本原來的樣子，stash名稱為該版本名稱
git stash save 名稱: 儲存一個自己命名的stash至stash的暫存區
git stash list: 查詢目前有的stash
git stash pop: 取出最近的一個stash，並將其從stash的暫存區中刪除
git stash apply stash數字: 取出特定的stash，並且不會從暫存區中刪除
git stash drop stash數字: 從暫存區中移除特定stash

【less 介面】
f: 下一頁
b: 上一頁
q: 離開

【branch 解釋】
可以想像成是遊戲的主線與支線，不同的是，branch的兩條線可以同時前進，
並且也可以在中途合併，確定兩條線合併完成後，也可將原本的支線刪掉，繼續主線

【Cherry-Pick 採櫻桃解釋】
假設有5個版本，A>B>C>D>E
我們知道在"C"版本的新功能出現了BUG，但"D"、"E"新增的版本的功能又是好的時候，
這時就可使用"Cherry-Pick"的技巧，將壞櫻桃從版本去除。
-基本做法
    1.git log:先將想要cherry-pick的存檔點記錄下來(否則後面需要使用git reflog查詢)
    2.git reset --hard 存檔B: 將git完整回朔至存檔B
    3.git cherry-pick 存檔D: 將存檔D的資料加入目前版本
    4.git cherry-pick 存檔E: 將存檔E的資料加入目前版本
    這會使我們保留了"B、D、E"這三個想要的存檔，並且將壞掉的存檔"C"丟掉

【git reflog 用法】
git會記錄你所有的動作，假設今天意外的回到不該回去的版本，並且用"git log"已經查不到最新版本，
此時可以使用"git reflog"指令，查看自己對版本所做的所有動作，並使用"git reset"將其恢復
-基本做法
    1.git reflog: 查詢動作代碼
    2.git reset 動作代碼: 回復至該動作前

【git commit --amend 用法】
忘了寫一點小東西或是想修改版本資訊，但又不想為此上傳一個新的版本時使用的。
git commit --amend 會開啟一個文字編輯器，可以在這裡面修改最新一個版本的提交訊息，
並且在存檔、關閉後，會commit所有已追蹤的資料。
當開啟文字編輯器介面後發現不用做任何修改時，需將文字編輯器內清空並關閉，這樣就會停止更新上傳。
-基本用法
    1.忘了寫一點小東西或是想修改版本資訊，但又不想為此上傳一個新的版本
    2.將忘了寫的東西寫好，並且存檔+追蹤(git add .)
    3.使用git commit --amend，修改版本資訊後儲存並關閉
    
【git stash 用法】
當我對程式做了一些修改，且修改到一半不得不去做其他事情，
但又不想為了這一些修改上傳一個新版本時，就可以使用該指令。
git stash 會將目前追蹤中檔案的檔案狀態儲存至stash的暫存區，並且還原至該版本原來的樣子，
當做完別的事，想回來繼續修改該程式時，可用"git stash pop"或是"git stash drop"繼續進行修改。
-基本用法
    1.對程式做了一些修改，但又不想現在提交
    2."git stash"或是"git stash save 名稱"將目前狀態儲存至stash暫存區
    3.做完別的事情
    4."git stash pop"或是"git stash apply stash數字"，將暫存區的狀態拿出來繼續撰寫
    5.若使用"git stash apply"，並且已做完該stash要做的事，記得刪除"git stash"

【git revert 用法】
當我意外做了一個錯誤的commit，並且意外的推送至了github
此時就可以用這個方法刪除錯誤，並commit一個新的版本
git revert 版本號碼，該指令會刪除該commit對檔案所做的動作，後提交一個新版本
此外，可以在開啟的文字編輯器修改版本的更新訊息，若放棄提交則可以刪除文件內的文字後關閉
也可以使用vim的指令":q"不要保存的退出。
-基本用法
    1.意外commit一個錯誤的版本
    2.git log 找出錯誤的版本，並記下他的版本號碼
    3.git revert 版本號碼，修改版本資訊後儲存並關閉
    4.git push 至github上的儲存庫





2

