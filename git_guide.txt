【git基本的執行順序】
追蹤目錄 → 檔案修改 →　追蹤檔案　→　提交版本

【git 指令】
git init: 追蹤此目錄(建立'.git'子目錄，用於儲存git訊息)
git status: 用於檢查當前儲存庫的狀態，並顯示已修改或未追蹤的檔案。
git add 檔名: 將特定檔案添加到暫存區，準備提交到版本控制系統中。
git add .: 將所有已修改或新增的檔案添加到暫存區，準備提交到版本控制系統中。
git restore 檔名: 將檔案回復至最新版本
git restore --source=版本代碼 檔名: 將檔案回復至特定版本
git commit -a: 直接提交有修改的檔案，相當於同時做add及commit的動作
git commit -m '該修改紀錄的名稱': 將已暫存的檔案提交到版本控制系統中，並附上一條相關的修改訊息。
git log: 用於檢視版本控制系統的提交紀錄，顯示先前的提交歷史記錄，若進入less模式，可用"q"退出
git reset 版本代碼: 回到至該版本，回到的位置為修改後、追蹤前
git branch: 顯示當前儲存庫中的所有分支，以及哪個分支是當前活動分支。
git branch 分支名: 創建一個新的分支，並以指定的名稱命名。
git branch -d 分支名: 刪除支線
git checkout 分支名: 切換到指定的分支，開始在該分支上進行工作。
git checkout -b 分支名: 創建一個新分支，並且切換至該分支
git checkout -: 切換至上個分支
git merge 分支: 將目標分支合併至目前分支，且若兩分支衝突，則需手動排除問題

【branch】
可以想像成是遊戲的主線與支線，不同的是，branch的兩條線可以同時前進，
並且也可以在中途合併，確定兩條線合併完成後，也可將原本的支線刪掉，繼續主線